version: "3.9"

services:
  db:
    image: postgres:14.1
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=pizzami
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password

  rabbitmq:
    image: "rabbitmq:alpine"
    container_name: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  django:
    build:
      context: .
      dockerfile: docker/production.Dockerfile
    container_name: django
    command: ./docker/production_web_entrypoint.sh
    environment:
      - DATABASE_URL=psql://user:password@db:5432/pizzami
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - rabbitmq
    restart: on-failure


  redis:
    image: redis:7
    container_name: redis
    ports:
      - 6379:6379


  celery:
    build:
      context: .
      dockerfile: docker/production.Dockerfile
    # command: celery -A pizzami.tasks worker -l info --without-gossip --without-mingle --without-heartbeat
    container_name: worker
    command: ./docker/celery_entrypoint.sh
    environment:
      - DATABASE_URL=psql://user:password@db:5432/pizzami
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
    restart: on-failure

  beats:
    build:
      context: .
      dockerfile: docker/production.Dockerfile
    # command: celery -A pizzami.tasks beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    container_name: beats
    command: ./docker/beats_entrypoint.sh
    environment:
      - DATABASE_URL=psql://user:password@db:5432/pizzami
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
    volumes:
      - .:/app
    depends_on:
      - db
      - rabbitmq
    restart: on-failure

  mongodb:
    image: mongo:7.0.8
    container_name: mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - 27017:27017

  mongo-express:
    image: mongo-express:1-18-alpine3.18
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_BASICAUTH_USERNAME: mexpress
      ME_CONFIG_BASICAUTH_PASSWORD: mexpress


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.1
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    volumes:
      - .:/app
    ports:
      - 9200:9200